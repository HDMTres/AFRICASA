---
# tasks file for ./roles/prometheus
- name: Check if prometheus is installed
  ansible.builtin.stat:
    path: "{{ prometheus_bin_dir }}/prometheus"
  register: __prometheus_installed

- name: Get version if prometheus is installed
  ansible.builtin.shell: |
    cat /etc/systemd/system/prometheus.service | grep Version | sed s/'.*Version '//g
  register: __prometheus_installed_version
  when: __prometheus_installed.stat.exists
  changed_when: false

- name: Create prometheus group
  ansible.builtin.group:
    name: "{{ prometheus_group }}"
    system: true
  when: not __prometheus_installed.stat.exists

- name: Create prometheus user
  ansible.builtin.user:
    name: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    system: true
    shell: /usr/sbin/nologin
  when: not __prometheus_installed.stat.exists

- name: Create prometheus config directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0755'
  loop:
    - "{{ prometheus_config_dir }}"
    - "{{ prometheus_data_dir }}"
  when: not __prometheus_installed.stat.exists

- name: Download and unzip prometheus if not installed
  ansible.builtin.unarchive:
    src: "{{ prometheus_download_url }}"
    dest: "/tmp"
    remote_src: true
    validate_certs: true
  when: not __prometheus_installed.stat.exists or not __prometheus_installed_version.stdout == prometheus_version

- name: Move prometheus binary to the correct location
  ansible.builtin.copy:
    src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64/prometheus"
    dest: "{{ prometheus_bin_dir }}/prometheus"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0755'
    remote_src: true
  when: not __prometheus_installed.stat.exists or not __prometheus_installed_version.stdout == prometheus_version

- name: Clean up temporary files
  ansible.builtin.file:
    path: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64"
    state: absent



- name: Copy prometheus configuration file
  ansible.builtin.template:
    src: "prometheus.yml.j2"
    dest: "{{ prometheus_config_dir }}/prometheus.yml"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0644'
  when: not __prometheus_installed.stat.exists or not __prometheus_installed_version.stdout == prometheus_version
  notify: Reload daemon and restart prometheus

- name: Create targets directory for service discovery
  ansible.builtin.file:
    path: "{{ prometheus_config_dir }}/targets"
    state: directory
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0755'

- name: Create rules directory
  ansible.builtin.file:
    path: "{{ prometheus_config_dir }}/rules"
    state: directory
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0755'

- name: Copy service discovery script
  ansible.builtin.template:
    src: "service-discovery.sh.j2"
    dest: "/usr/local/bin/prometheus-discovery.sh"
    mode: '0755'
    owner: root
    group: root

- name: Create service discovery cron job
  ansible.builtin.cron:
    name: "Prometheus service discovery"
    minute: "*/2"
    job: "/usr/local/bin/prometheus-discovery.sh"
    user: root

- name: Create initial empty targets files
  ansible.builtin.copy:
    content: "[]"
    dest: "{{ prometheus_config_dir }}/targets/{{ item }}.json"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0644'
    force: false
  loop:
    - containers
    - compose_services
    - applications

- name: Create Prometheus systemd service
  ansible.builtin.template:
    src: "prometheus.service.j2"
    dest: "/etc/systemd/system/prometheus.service"
    mode: '0644'
  notify: Reload daemon and restart prometheus

- name: Run initial service discovery
  ansible.builtin.command: "/usr/local/bin/prometheus-discovery.sh"
  changed_when: false

- name: Configure UFW for prometheus
  community.general.ufw:
    rule: allow
    port: 9090
    proto: tcp
  become: true

- name: Make sure prometheus service is enabled and started
  ansible.builtin.systemd:
    name: prometheus
    state: started
    enabled: true
  when: not __prometheus_installed.stat.exists or not __prometheus_installed_version.stdout == prometheus_version

- name: Flush handlers
  ansible.builtin.meta: flush_handlers


